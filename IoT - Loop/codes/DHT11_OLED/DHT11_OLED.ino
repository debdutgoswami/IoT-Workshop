#include <Wire.h> // Wire library is used for I2C Communication on OLED
#include <Adafruit_GFX.h> // AdafruitGFX library for Arduino provides a common syntax and set of graphics functions for all of OLED displays
#include <Adafruit_SSD1306.h> 
/*SSD1306 is a single-chip CMOS OLED/PLED driver with controller for organic / polymer light emitting
diode dot-matrix graphic display system. It consists of 128 segments and 64commons. This IC is
designed for Common Cathode type OLED panel. */
#include <DHT.h> // DHT Library (for both DHT11 AND DHT22)
#define DHTPIN D5 // PIN D5 or GPIO 14
#define DHTTYPE DHT11 
DHT dht(DHTPIN, DHTTYPE);

#define OLED_RESET LED_BUILTIN // D4
Adafruit_SSD1306 display(OLED_RESET);

#define NUMFLAKES 10
#define XPOS 0
#define YPOS 1
#define DELTAY 2

static const unsigned char PROGMEM myBitmap[] =   // PROGMEM is used to store data in a flash memory instead of SRAM (Static Random Access Memory)
{ 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, // image2cpp tool is used to change images into byte arrays
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0x7e, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xfe, 0x3c, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xfc, 0x3c, 0x7f, 0xff, 0xf1, 0xf0, 0xff, 0x0f, 0xf7, 0xbf, 0xf6, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xf8, 0x18, 0x3f, 0xff, 0xc0, 0xf0, 0x3e, 0x07, 0xf7, 0x9f, 0xf6, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xf8, 0x18, 0x1f, 0xff, 0xc0, 0x70, 0x3e, 0x07, 0xf7, 0x3f, 0xf2, 0xff, 0xfd, 0xff, 0xff, 
0xff, 0xf0, 0x18, 0x0f, 0xff, 0xce, 0x76, 0x1c, 0x67, 0xf7, 0x3f, 0xf2, 0xff, 0xfd, 0xff, 0xff, 
0xff, 0xe0, 0x18, 0x07, 0xff, 0x9f, 0xf7, 0x9c, 0xf7, 0xf6, 0x7f, 0xf2, 0xff, 0xf9, 0xff, 0xff, 
0xff, 0xc0, 0x38, 0x03, 0xff, 0x9f, 0xf7, 0xd9, 0xff, 0xf6, 0x7c, 0xf2, 0xff, 0x78, 0xf3, 0xff, 
0xff, 0x80, 0x3c, 0x01, 0xff, 0x3f, 0xf7, 0xc9, 0xff, 0xf4, 0x78, 0x72, 0xe6, 0x18, 0x61, 0xff, 
0xff, 0x00, 0x7e, 0x00, 0xff, 0x3f, 0xf7, 0xc9, 0xff, 0xf4, 0xf0, 0x32, 0xc4, 0x18, 0x41, 0xff, 
0xfe, 0x00, 0xff, 0x00, 0xff, 0x3f, 0xf7, 0xc9, 0xff, 0xf4, 0xf3, 0x32, 0xcc, 0x98, 0xc8, 0xff, 
0xfe, 0x01, 0xff, 0x80, 0x7f, 0x38, 0x37, 0xcb, 0xc1, 0xf0, 0xf3, 0xb2, 0x8d, 0xc9, 0xfc, 0xff, 
0xfe, 0x01, 0xff, 0x80, 0x7f, 0x38, 0x37, 0xcb, 0xc1, 0xf0, 0xf7, 0xb2, 0x9f, 0x4d, 0xf4, 0xff, 
0xfe, 0x03, 0xff, 0xc0, 0x7f, 0x38, 0x37, 0xc9, 0xc1, 0xf0, 0xe7, 0x92, 0x1e, 0x0d, 0xe0, 0xff, 
0xfe, 0x03, 0xff, 0xc0, 0x7f, 0x3f, 0x37, 0xc9, 0xf9, 0xf2, 0x67, 0x92, 0x1c, 0x0d, 0xc0, 0xff, 
0xfe, 0x01, 0xff, 0x80, 0x7f, 0x3f, 0x37, 0xc9, 0xf9, 0xf2, 0x67, 0x92, 0x1c, 0xcd, 0xcc, 0xff, 
0xfe, 0x00, 0xff, 0x00, 0x7f, 0x9f, 0x37, 0xd9, 0xfb, 0xf7, 0x27, 0xb2, 0x09, 0xcd, 0xcc, 0xff, 
0xff, 0x00, 0x7e, 0x00, 0xff, 0x9f, 0x37, 0x9c, 0xf3, 0xf7, 0x37, 0xb2, 0x49, 0xcd, 0x9c, 0xff, 
0xff, 0x80, 0x7e, 0x01, 0xff, 0x8e, 0x77, 0x1c, 0xf3, 0xf7, 0x33, 0x32, 0xc9, 0x8c, 0xdc, 0xff, 
0xff, 0xc0, 0x3c, 0x03, 0xff, 0xc0, 0x70, 0x3c, 0x07, 0xf7, 0xb0, 0x32, 0xe4, 0x0c, 0x40, 0xff, 
0xff, 0xe0, 0x38, 0x07, 0xff, 0xc0, 0xf0, 0x3e, 0x07, 0xf7, 0x98, 0x72, 0xe4, 0x0c, 0x40, 0xff, 
0xff, 0xf0, 0x18, 0x0f, 0xff, 0xe0, 0xf0, 0x7f, 0x0f, 0xf7, 0x98, 0x76, 0xe4, 0x0c, 0x60, 0xff, 
0xff, 0xf8, 0x18, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xfc, 0x38, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xfc, 0x3c, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xfe, 0x3c, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff };

#if (SSD1306_LCDHEIGHT != 64)
#error("Height incorrect, please fix Adafruit_SSD1306.h!"); // fix header file for OLED incompatibility
#endif
void setup() {
  pinMode(14,INPUT);   // sets the digital pin 13 as output 
 Serial.begin(115200); // sets baudrate to 115200 bits per second
  Serial.println("DHT11 Moniter System"); // print statements on serial port 
 dht.begin();
  display.begin(SSD1306_SWITCHCAPVCC, 0x3C); //or 0x3D [I2C ADDRESS]
   display.clearDisplay(); //for Clearing the display
   display.drawBitmap(0, 0, myBitmap, 128, 64, WHITE); // display.drawBitmap(x position, y position, bitmap data, bitmap width, bitmap height, color)
   display.display();
  delay(2000);  
  display.clearDisplay();
display.drawPixel(10, 10, WHITE);
  display.display();
  delay(2000);
  display.clearDisplay();
  display.setTextColor(WHITE); // Sets Text Colour to WHITE
  display.setTextSize(1); // Sets Text Size to 1
  display.setCursor(25,11);
  display.print("<Nomoshkar>");
  display.setTextSize(0.8); 
  display.display();
  delay(2000);
  display.clearDisplay();
  display.setCursor(0,3);
  display.print("<Welcome to IoTLoop>");
  display.display();
  delay(4000);
  display.clearDisplay();
}

void loop() {
  // put your main code here, to run repeatedly:
 showTemp();
 display.clearDisplay();

 
 
}


void showTemp(void) {   // function to read and display temperature
   delay(2000);// Wait a few seconds for sensor to measure
  
  float h = dht.readHumidity();
  // Read temperature as Celsius
  float t = dht.readTemperature();
  // Read temperature as Fahrenheit
  float f = dht.readTemperature(true);
  
  
  
  notehum(h);
  display.clearDisplay();
  delay(3000);
  notetemp(t,'C');   

 delay(3000);  
 display.clearDisplay();
 notetemp(f,'F');   
 delay(3000); 

 
}
void notehum(float hum)
{ display.drawRect(1, 1, display.width()-1, display.height()-1, WHITE);  
   display.setTextSize(2);
    display.setCursor(15,10);
  display.print(hum);
  display.setCursor(80,10);
  display.print("%"); 
    display.setCursor(112,10);    
  display.print("H"); 
 display.display();
  
}
void notetemp(float temp, char C_F)   
 {
 display.drawRect(1, 1, display.width()-1, display.height()-1, WHITE);  
  display.setTextColor(WHITE);   
  display.setTextSize(1);       
  display.setCursor(104,3);
  display.print("o");            
  display.setTextSize(2);
  display.setCursor(112,10);    
  display.print(C_F);            

 if(temp >=100 || temp < 0){    
    display.setTextSize(2);
    display.setCursor(15,10);
 }
 else if(temp < 10 && temp >= 0){  
  display.setTextSize(3);
  display.setCursor(25,6);
 }

 else
 {
    display.setTextSize(3);   
    display.setCursor(10,6);
 }

  display.print(temp);  
  display.display();
  
 }
